{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16600\viewh18040\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 void yield()\{\
	asm("push\{r0-r12,lr\}");\
	asm(.......... sp) sauvegarde sp;\
	current_process=schedule(),\
	asm(............sp .......... ); restauration de sp \
	if(current_process->state==NEW)\{\
		start_current_process();\
	\}else\{\
		asm("pop\{r0-r12,lr\}"); restauration de la pile du correspondant au pcb courant\
	\}\
\}\
\
// \'e0 chaque interruption du timer , appeler yield(). \
\
void notmain()\{\
	create_ctx(A);\
	create_ctx(B);\
	start_sched();\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 void start_sched()\{ // pour g\'e9rer le premier cas, quand aucun pcb n'a \'e9t\'e9 lanc\'e9 (dummy ne sert qu'\'e0 	                      // initialiser l'ordonnanceur. sp initial sauvegard\'e9 dans dummy_pcb  )\
	pcb_s dummy_pcb;\
	dummy_pcb.next=first_pcb; \
	current_process = &dummy_pcb;\
	yield();\
\}\
\
f_A()\{	\
	...........\
	.........\
	.........\
	.........\
	yield();\
	............\
\}\
\
void schedule()\{\
	next_running = current_process->next; \
	struct pcb_s * pcb = current_pcb; \
	while(pcb->next->state==TERMINATED)\{\
		// free memory \
		//adapt linked list\
	\}\
	next_running =current_process->next; \
\}\
\
void start_current_process()\{\
	current_process->entry_point();\
	current_process->state=TERMINATED; \
	yield();\
\}\
}